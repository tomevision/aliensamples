tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: kubernetes-cluster-types
  template_version: 1.4.0-SNAPSHOT
  template_author: alien4cloud

description: Contains all types required to deploy a Kubernetes Cluster.

imports:
  - tosca-normative-types:1.0.0-ALIEN14
  - docker-engine-type:1.4.0-SNAPSHOT

node_types:

  # #################################################
  #
  # Kubernetes master nodes node_types
  #
  #
  org.alien4cloud.nodes.kubernetes.DockerEngine:
    derived_from: org.alien4cloud.nodes.DockerEngine
    interfaces:
      Standard:
        start: scripts/docker/start_docker.sh
        stop: scripts/docker/stop_docker.sh

  org.alien4cloud.nodes.kubernetes.Etcd:
    description: >
      Installs ETCD on k8s master.
    derived_from: tosca.nodes.SoftwareComponent
    metadata:
      icon: images/etcd.png
    properties:
      component_version:
        type: version
        default: 2.2.1
    capabilities:
      etcd: org.alien4cloud.capabilities.kubernetes.ETCD
    requirements:
      - host:
          capability: org.alien4cloud.capabilities.DockerHost
          node: org.alien4cloud.nodes.kubernetes.DockerEngine
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
    interfaces:
      Standard:
        create:
          implementation: scripts/etcd/create_etcd.sh
          inputs:
            LOCAL_IP: { get_attribute: [HOST, ip_address] }
            ETCD_VERSION: { get_property: [SELF, component_version] }

  org.alien4cloud.nodes.kubernetes.Flannel:
    description: >
      Installs Flannel & configure docker.
    derived_from: tosca.nodes.SoftwareComponent
    metadata:
      icon: images/flannel.png
    properties:
      component_version:
        type: version
        default: 0.5.5
      ip_mask:
        type: boolean
        default: true
    capabilities:
      flannel:
          type: org.alien4cloud.capabilities.flannel.Connectivity
    requirements:
      - host:
          capability: org.alien4cloud.capabilities.DockerHost
          node: org.alien4cloud.nodes.kubernetes.DockerEngine
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
      - etcd:
          capability: org.alien4cloud.capabilities.kubernetes.ETCD
          node: org.alien4cloud.nodes.kubernetes.Etcd
          relationship: org.alien4cloud.relationships.kubernetes.RetrieveEtcdIpAddress
          occurrences: [1, 1]
    interfaces:
      Standard:
        start:
          implementation: scripts/flannel/start_flannel.sh
          inputs:
            # ETCD_IP: { get_attribute: [SELF, etcd, target_ip_address] }
            FLANNEL_VERSION: { get_property: [SELF, component_version] }
            FLANNEL_IFACE: { get_property: [SELF, flannel, interface] }
            FLANNEL_IPMASQ: { get_property: [SELF, ip_mask] }


  org.alien4cloud.nodes.kubernetes.Hyperkube:
    abstract: true
    derived_from: tosca.nodes.SoftwareComponent
    metadata:
      icon: images/hyperkube.png
    properties:
      component_version:
        type: version
        default: 1.2.1
    requirements:
      - host:
          capability: org.alien4cloud.capabilities.DockerHost
          node: org.alien4cloud.nodes.kubernetes.DockerEngine
          relationship: tosca.relationships.HostedOn
          occurrences: [1, 1]
      - flannel:
          capability: org.alien4cloud.capabilities.flannel.Connectivity
          occurrences: [1, 1]


  org.alien4cloud.nodes.kubernetes.KubeMaster:
    description: >
      Installs kubernetes master components.
    derived_from: org.alien4cloud.nodes.kubernetes.Hyperkube
    metadata:
      icon: images/kube_master.png
    attributes:
      api_endpoint: { concat:  ["http://", get_attribute: [HOST, public_ip_address], ":8080"] }
    capabilities:
      kube_master:
          type: org.alien4cloud.capabilities.kubernetes.MasterHost
      configuration:
          type: org.alien4cloud.capabilities.kubernetes.MasterConfiguration
    interfaces:
      Standard:
        start:
          implementation: scripts/kubernetes/master/start_master.sh
          inputs:
            MASTER_IP: { get_attribute: [HOST, ip_address] }
            K8S_VERSION: { get_property: [SELF, component_version] }
            DNS_DOMAIN: { get_property: [SELF, dns_domain] }
            FLANNEL_IFACE: { get_property: [SELF, flannel, interface] }

  org.alien4cloud.nodes.kubernetes.Namespace:
    description: >
      Creates a namespace in Kubernetes.
    derived_from: tosca.nodes.Container.Application
    metadata:
      icon: images/kube.png
    capabilities:
      namespace:
          type: org.alien4cloud.capabilities.kubernetes.Namespace
    requirements:
      - host:
          capability: org.alien4cloud.capabilities.kubernetes.MasterHost
          occurrences: [1, 1]
    artifacts:
      - namespace_pod_file:
          type: tosca.artifacts.File
          file: scripts/kubernetes/namespace/namespace.yaml
    interfaces:
      Standard:
        create:
          implementation: scripts/kubernetes/namespace/namespace.sh
          inputs:
            MASTER_IP: { get_attribute: [HOST, ip_address] }
            NAMESPACE: { get_property: [SELF, namespace, namespace] }

  # org.alien4cloud.nodes.kubernetes.DNS:
  #   description: >
  #     Creates Kubernetes DNS.
  #   derived_from: tosca.nodes.Container.Application
  #   metadata:
  #     icon: images/kube.png
  #   properties:
  #     replicas:
  #       type: integer
  #       default: 1
  #   requirements:
  #     - host:
  #         capability: org.alien4cloud.capabilities.kubernetes.MasterHost
  #         occurrences: [1, 1]
  #     - namespace:
  #         capability: org.alien4cloud.capabilities.kubernetes.Namespace
  #         occurrences: [0, 1]
  #     # - master_config:
  #     #     capability: org.alien4cloud.capabilities.kubernetes.MasterConfiguration
  #     #     occurrences: [1, 1]
  #   artifacts:
  #     - rc_template_file:
  #         file: scripts/kubernetes/dns/rc-template.yaml
  #         type: tosca.artifacts.File
  #     - svc_template_file:
  #         file: scripts/kubernetes/dns/svc-template.yaml
  #         type: tosca.artifacts.File
  #   interfaces:
  #     Standard:
  #       create:
  #         implementation: scripts/kubernetes/dns/create_dns.sh
  #         inputs:
  #           NAMESPACE: { get_property: [SELF, namespace, namespace] }
  #           MASTER_IP: { get_attribute: [HOST, ip_address] }
  #           # DNS_DOMAIN: { get_property: [SELF, master_config, dns_domain] }
  #           DNS_DOMAIN: cluster.local
  #           DNS_REPLICAS: { get_property: [SELF, replicas] }

  org.alien4cloud.nodes.kubernetes.Dashboard:
    description: >
      Install the kubernetes dashboard (on k8s master)
    derived_from: tosca.nodes.Container.Application
    metadata:
      icon: images/kube.png
    attributes:
      kubernetes_ui: { concat:  ["http://", get_attribute: [HOST, public_ip_address], ":8080/ui"] }
    requirements:
      - host:
          capability: org.alien4cloud.capabilities.kubernetes.MasterHost
          occurrences: [1, 1]
      - namespace:
          capability: org.alien4cloud.capabilities.kubernetes.Namespace
          occurrences: [0, 1]
    artifacts:
      - dashboard_rc_file:
          file: scripts/kubernetes/dashboard/dashboard-rc.yaml
          type: tosca.artifacts.File
      - dashboard_svc_file:
          file: scripts/kubernetes/dashboard/dashboard-svc.yaml
          type: tosca.artifacts.File
    interfaces:
      Standard:
        start:
          implementation: scripts/kubernetes/dashboard/dashboard.sh
          inputs:
            NAMESPACE: { get_property: [SELF, namespace, namespace] }
            MASTER_IP: { get_attribute: [HOST, ip_address] }

  org.alien4cloud.nodes.kubernetes.Kubectl:
    description: >
      Install the kubectl
    derived_from: tosca.nodes.SoftwareComponent
    metadata:
      icon: images/kube.png
    requirements:
      - docker_cli:
          capability: org.alien4cloud.capabilities.DockerCLI
          relationship: tosca.relationships.DependsOn
          occurrences: [0, 1]
    properties:
      component_version:
        type: version
        default: 1.5.3
    interfaces:
      Standard:
        create:
          implementation: scripts/kubernetes/kubectl/kubectl.sh
          inputs:
            KUBECTL_VERSION: { get_property: [SELF, component_version] }


  # #################################################
  #
  # Kubernetes cluster nodes node_types
  #
  #

  org.alien4cloud.nodes.kubernetes.KubeNode:
    description: >
      Installs the Hyperkube process and a proxy on the node host.
    derived_from: org.alien4cloud.nodes.kubernetes.Hyperkube
    metadata:
      icon: images/kube.png
    requirements:
      - join_master:
          capability: org.alien4cloud.capabilities.kubernetes.MasterConfiguration
          relationship: org.alien4cloud.relationships.kubernetes.RetrieveMasterConfigurations
          node: org.alien4cloud.nodes.kubernetes.KubeMaster
          occurrences: [1, 1]
    interfaces:
      Standard:
        start:
          implementation: scripts/kubernetes/node/start_node.sh
          inputs:
            # MASTER_IP: { get_attribute: [SELF, join_master, target_ip_address] }
            K8S_VERSION: { get_property: [SELF, component_version] }
            DNS_DOMAIN: { get_property: [SELF, join_master, dns_domain] }
            FLANNEL_IFACE: { get_property: [SELF, flannel, interface] }
        stop:
          implementation: scripts/kubernetes/node/stop_node.sh
          inputs:
            # MASTER_IP: { get_attribute: [SELF, join_master, target_ip_address] }
            FLANNEL_IFACE: { get_property: [SELF, flannel, interface] }


capability_types:

  org.alien4cloud.capabilities.kubernetes.ETCD:
    derived_from: tosca.capabilities.Node

  org.alien4cloud.capabilities.flannel.Connectivity:
    derived_from: tosca.capabilities.Connectivity
    properties:
      interface:
        type: string
        default: eth0

  org.alien4cloud.capabilities.kubernetes.MasterConfiguration:
    derived_from: tosca.capabilities.Node
    properties:
      dns_domain:
        type: string
        default: cluster.local

  org.alien4cloud.capabilities.kubernetes.MasterHost:
    derived_from: tosca.capabilities.Container

  org.alien4cloud.capabilities.kubernetes.Namespace:
    derived_from: tosca.capabilities.Node
    properties:
      namespace:
        type: string
        default: kube-system

relationship_types:

  org.alien4cloud.relationships.Flannel:
    derived_from: tosca.relationships.DependsOn
    valid_target_types: [ org.alien4cloud.capabilities.flannel.Connectivity ]

  org.alien4cloud.relationships.kubernetes.HostedOnMaster:
    derived_from: tosca.relationships.HostedOn
    valid_target_types: [ org.alien4cloud.capabilities.kubernetes.MasterHost ]
    attributes:
      kubernetes_master_ip: { get_attribute: [TARGET, ip_address] }

  org.alien4cloud.relationships.kubernetes.DependsOnNamespace:
    derived_from: tosca.relationships.DependsOn
    valid_target_types: [ org.alien4cloud.capabilities.kubernetes.Namespace ]

  org.alien4cloud.relationships.kubernetes.RetrieveTargetIpAddress:
    abstract: true
    derived_from: tosca.relationships.ConnectsTo
    attributes:
      target_ip_address: { get_operation_output: [SELF, configure, postConfigureSource, EXPORTED_TARGET_IP] }
    interfaces:
      configure:
        post_configure_source:
          implementation: scripts/exposeTargetIpAddress.sh
          inputs:
            TARGET_IP: { get_attribute: [TARGET, ip_address] }

  org.alien4cloud.relationships.kubernetes.RetrieveMasterConfigurations:
    derived_from: org.alien4cloud.relationships.kubernetes.RetrieveTargetIpAddress
    valid_target_types: [ org.alien4cloud.capabilities.kubernetes.MasterConfiguration ]

  org.alien4cloud.relationships.kubernetes.RetrieveEtcdIpAddress:
    derived_from: org.alien4cloud.relationships.kubernetes.RetrieveTargetIpAddress
    valid_target_types: [ org.alien4cloud.capabilities.kubernetes.ETCD ]
